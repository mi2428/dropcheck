#!/usr/bin/env bash

BANNER="
  ___                  ___ _           _     ___ __  _ ___
 |   \ _ _ ___ _ __   / __| |_  ___ __| |__ |_  )  \/ ( _ )
 | |) | '_/ _ \ '_ \ | (__| ' \/ -_) _| / /  / / () | / _ \\
 |___/|_| \___/ .__/  \___|_||_\___\__|_\_\ /___\__/|_\___/
              |_|
                                              (c) 2018 sira
"

IPV4_RE='([0-9]{1,3}\.){3}[0-9]{1,3}'
IPV6_RE='([0-9a-fA-F:]+:+)+[0-9a-fA-F]+'

PING_INTERVAL=0.1
PING_COUNT=10

GOOGLE_PUBLIC_DNS_V4='8.8.8.8'
GOOGLE_PUBLIC_DNS_V6='2001:4860:4860::8888'

WIDE_DOMAIN='www.wide.ad.jp'

GOOGLE_IPV4='https://ipv4.google.com/'
GOOGLE_IPV6='https://ipv6.google.com/'


get_ipv4_cidr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local cidr=$(ip -4 addr show ${1} | grep -m 1 'inet' | awk '{print $2}')
  if [ -z "${cidr}" ]; then
    return 1
  fi
  echo "${cidr}"
  return 0
}

get_ipv4_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  cidr=$(get_ipv4_cidr ${1})
  if [ $? != 0 ]; then
    return 1
  fi
  addr=$(echo ${cidr} | cut -d '/' -f 1)
  if [ -z "${addr}" ]; then
    return 1
  fi
  echo "${addr}"
  return 0
}

get_ipv4_gw_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local gw_addr=$(ip -4 route | grep -m 1 "default.*${1}" | awk '{print $3}')
  if [ -z "{$gw_addr}" ]; then
    return 1
  fi
  echo "${gw_addr}"
  return 0
}

print_status () {
  if [ $# != 1 ]; then
    return 1
  fi
  if [ $1 != 0 ]; then
    echo -ne "[\e[31;1mFAIL\e[m] "
  else
    echo -ne "[\e[32;1mPASS\e[m] "
  fi
  return 0
}

test_ipv4 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local ret=0
  local ipv4_cidr
  ipv4_cidr=$(get_ipv4_cidr ${if_name})
  ret=$((${ret} || ${?}))
  local ipv4_gw_addr
  ipv4_gw_addr=$(get_ipv4_gw_addr ${if_name})
  ret=$((${ret} || ${?}))
  print_status $ret
  if [ $ret != 0 ]; then
    echo 'Unable to retrieve IPv4 address'
  else
    echo "IPv4 address: ${ipv4_cidr}, gateway address: ${ipv4_gw_addr}"
  fi
  return $ret
}

test_ping_ipv4 () {
  local res
  case $# in
    1 )
      res=$(ping -c ${PING_COUNT} -i ${PING_INTERVAL} ${1})
      ;;
    2 )
      local size=$((${2} - 28))
      res=$(ping -c ${PING_COUNT} -i ${PING_INTERVAL} -s ${size} ${1})
      ;;
    * )
      return 1
      ;;
  esac
  local ret=$?
  print_status $ret
  case $# in
    1 )
      echo -n "ping ${1}: "
      ;;
    2 )
      echo -n "ping ${1} (${2} bytes): "
      ;;
    * )
      return 1
      ;;
  esac
  if [ $ret != 0 ]; then
    echo $(echo "${res}" | tail -n 1)
  else
    echo $(echo "${res}" | tail -n 2 | head -n 1)
  fi
  return $ret
}

test_dig_v4 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local res
  res=$(dig +short $1 A | grep -v -e '^$')
  local ret=$?
  print_status $ret
  if [ $ret != 0 ]; then
    echo "dig ${1} A"
  else
    echo "${1} IN A ${res}"
  fi
}

test_dig_v6 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local res
  res=$(dig +short $1 AAAA | grep -v -e '^$')
  local ret=$?
  print_status $ret
  if [ $ret != 0 ]; then
    echo "dig ${1} AAAA"
  else
    echo "${1} IN AAAA ${res}"
  fi
}

test_http_v4 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local res
  res=$(wget --page-requisites -O .dropcheck $1 2>&1 | grep '200 OK')
  local ret=$?
  print_status $ret
  echo -n "GET $1"
  if [ $ret != 0 ]; then
    echo
  else
    echo ": $(echo "${res}" | tail -n 1 | awk '{print $(NF-1),$NF}')"
  fi
  return $ret
}

main () {
  echo "${BANNER}"
  if_name=$1

  test_ipv4 $if_name

  ipv4_addr=$(get_ipv4_addr ${if_name})
  ipv4_gw_addr=$(get_ipv4_gw_addr ${if_name})

  test_ping_ipv4 $ipv4_gw_addr
  test_ping_ipv4 $ipv4_gw_addr 1500
  test_ping_ipv4 $GOOGLE_PUBLIC_DNS_V4
  test_ping_ipv4 $GOOGLE_PUBLIC_DNS_V4 1500

  test_dig_v4 $WIDE_DOMAIN
  test_dig_v6 $WIDE_DOMAIN

  test_http_v4 $GOOGLE_IPV4
  test_http_v4 $GOOGLE_IPV6
}

if [ $# != 1 ]; then
  echo "Usage: ${0} interface"
  exit 1
fi

main $1
