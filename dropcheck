#!/usr/bin/env bash

BANNER="
  ___                  ___ _           _     ___ __  _ ___
 |   \ _ _ ___ _ __   / __| |_  ___ __| |__ |_  )  \/ ( _ )
 | |) | '_/ _ \ '_ \ | (__| ' \/ -_) _| / /  / / () | / _ \\
 |___/|_| \___/ .__/  \___|_||_\___\__|_\_\ /___\__/|_\___/
              |_|
                                              (c) 2018 sira
"

IPV4_CIDR_RE='([0-9]{1,3}\.){3}[0-9]{1,3}\/([0-9]|[12][0-9]|3[0-2])'
IPV6_CIDR_RE='([0-9a-fA-F:]+:+)+[0-9a-fA-F]+\/([0-9]|[1-8][0-9]|9[0-9]|1[01][0-9]|12[0-8])'
IPV4_ADDR_RE='([0-9]{1,3}\.){3}[0-9]{1,3}'
IPV6_ADDR_RE='([0-9a-fA-F:]+:+)+[0-9a-fA-F]+'

PING_INTERVAL=0.1
PING_COUNT=10

GOOGLE_PUBLIC_DNS_V4='8.8.8.8'
GOOGLE_PUBLIC_DNS_V6='2001:4860:4860::8888'

WIDE_DOMAIN='www.wide.ad.jp'

GOOGLE_IPV4='https://ipv4.google.com/'
GOOGLE_IPV6='https://ipv6.google.com/'


get_ipv4_cidr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local cidr=$(ip -4 addr show ${1} | grep -m 1 'inet' | awk '{print $2}')
  echo "$cidr" | grep -E $IPV4_CIDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${cidr}"
  return 0
}

get_ipv4_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local cidr
  cidr=$(get_ipv4_cidr ${1})
  if [ $? != 0 ]; then
    return 1
  fi
  local addr
  addr=$(echo ${cidr} | cut -d '/' -f 1)
  echo $addr | grep -E $IPV4_ADDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${addr}"
  return 0
}

get_ipv4_gw_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local gw_addr=$(ip -4 route | grep -m 1 "default.*${1}" | awk '{print $3}')
  echo $gw_addr | grep -E $IPV4_ADDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${gw_addr}"
  return 0
}

get_ipv6_cidr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local cidr=$(ip -6 addr show ${1} | grep 'inet6' | grep -v 'fe80' | head -n 1 | awk '{print $2}')
  echo $cidr | grep -E $IPV6_CIDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${cidr}"
  return 0
}

get_ipv6_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local cidr
  cidr=$(get_ipv6_cidr ${1})
  if [ $? != 0 ]; then
    return 1
  fi
  local addr
  addr=$(echo ${cidr} | cut -d '/' -f 1)
  echo $addr | grep -E $IPV6_ADDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${addr}"
  return 0
}

get_ipv6_gw_addr () {
  if [ $# != 1 ]; then
    return 1
  fi
  local gw_addr=$(ip -6 route | grep -m 1 "default.*${1}" | awk '{print $3}' | cut -d '%' -f 1)
  echo $gw_addr | grep -E $IPV6_ADDR_RE > /dev/null
  if [ $? != 0 ]; then
    return 1
  fi
  echo "${gw_addr}"
  return 0
}

echo_test_status () {
  if [ $# != 1 ]; then
    return 1
  fi
  if [ $1 != 0 ]; then
    echo -ne "[\e[31;1mFAIL\e[m] "
  else
    echo -ne "[\e[32;1mPASS\e[m] "
  fi
  return 0
}

echo_bold () {
  if [ $# != 1 ]; then
    return 1
  fi
  echo -e "\e[1m${1}\e[m"
  return 0
}

test_ipv4 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local ret=0
  local ipv4_cidr
  ipv4_cidr=$(get_ipv4_cidr ${if_name})
  ret=$((${ret} || ${?}))
  local ipv4_gw_addr
  ipv4_gw_addr=$(get_ipv4_gw_addr ${if_name})
  ret=$((${ret} || ${?}))
  echo_test_status $ret
  if [ $ret != 0 ]; then
    echo 'Unable to retrieve IPv4 address'
  else
    echo "IPv4 address: ${ipv4_cidr} (default gateway: ${ipv4_gw_addr})"
  fi
  return $ret
}

test_ipv6 () {
  if [ $# != 1 ]; then
    return 1
  fi
  local ret=0
  local ipv6_cidr
  ipv6_cidr=$(get_ipv6_cidr ${if_name})
  ret=$((${ret} || ${?}))
  local ipv6_gw_addr
  ipv6_gw_addr=$(get_ipv6_gw_addr ${if_name})
  ret=$((${ret} || ${?}))
  echo_test_status $ret
  if [ $ret != 0 ]; then
    echo 'Unable to retrieve IPv6 address'
  else
    echo "IPv6 address: ${ipv6_cidr} (default gateway: ${ipv6_gw_addr})"
  fi
  return $ret
}

test_ping_ipv4 () {
  local res
  source_addr=$(get_ipv4_addr ${2})
  case $# in
    2 )
      res=$(ping -c ${PING_COUNT} -i ${PING_INTERVAL} -S ${source_addr} ${1})
      ;;
    3 )
      local size=$((${3} - 28))
      res=$(ping -c ${PING_COUNT} -i ${PING_INTERVAL} -s ${size} -S ${source_addr} ${1})
      ;;
    * )
      return 1
      ;;
  esac
  local ret=$?
  echo_test_status $ret
  case $# in
    2 )
      echo -n "ping ${1}: "
      ;;
    3 )
      echo -n "ping ${1} (${3} bytes): "
      ;;
    * )
      return 1
      ;;
  esac
  if [ $ret != 0 ]; then
    echo $(echo "${res}" | tail -n 1)
  else
    echo $(echo "${res}" | tail -n 2 | head -n 1)
  fi
  return $ret
}

test_ping_ipv6 () {
  local res
  case $# in
    2 )
      res=$(ping6 -c ${PING_COUNT} -i ${PING_INTERVAL} -I ${2} ${1})
      ;;
    3 )
      local size=$((${3} - 48))
      res=$(ping6 -c ${PING_COUNT} -i ${PING_INTERVAL} -s ${size} -I ${2} ${1})
      ;;
    * )
      return 1
      ;;
  esac
  local ret=$?
  echo_test_status $ret
  case $# in
    2 )
      echo -n "ping ${1}: "
      ;;
    3 )
      echo -n "ping ${1} (${3} bytes): "
      ;;
    * )
      return 1
      ;;
  esac
  if [ $ret != 0 ]; then
    echo $(echo "${res}" | tail -n 1)
  else
    echo $(echo "${res}" | tail -n 2 | head -n 1)
  fi
  return $ret
}

test_dig () {
  if [ $# != 2 ]; then
    return 1
  fi
  local res
  res=$(dig +short $1 $2 | grep -v -e '^$')
  local ret=$?
  echo_test_status $ret
  if [ $ret != 0 ]; then
    echo "dig ${1} ${2}"
  else
    echo "${1} IN ${2} ${res}"
  fi
}

test_http () {
  if [ $# != 1 ]; then
    return 1
  fi
  local res
  res=$(wget -p -T 3 -O .dropcheck $1 2>&1 | grep '200 OK')
  local ret=$?
  echo_test_status $ret
  echo -n "GET $1"
  if [ $ret != 0 ]; then
    echo
  else
    echo ": $(echo "${res}" | tail -n 1 | awk '{print $(NF-1),$NF}')"
  fi
  return $ret
}

main () {
  echo "${BANNER}"

  if_name=$1

  echo_bold 'STEP 1. retrieve IP addresses'
  test_ipv4 $if_name
  check_ipv4=$?
  test_ipv6 $if_name
  check_ipv6=$?
  if [ $check_ipv4 != 0 ] && [ $check_ipv6 != 0 ]; then
    echo_bold "Unable to retrieve IP address(es)."
    echo_bold "Check the DHCP server or set IP address(es) by your self."
    echo
    exit 1
  fi
  echo

  echo_bold 'STEP 2. ping'
  if [ $check_ipv4 = 0 ]; then
    ipv4_addr=$(get_ipv4_addr ${if_name})
    ipv4_gw_addr=$(get_ipv4_gw_addr ${if_name})
    test_ping_ipv4 $ipv4_gw_addr $if_name
    test_ping_ipv4 $ipv4_gw_addr $if_name 1500
    test_ping_ipv4 $GOOGLE_PUBLIC_DNS_V4 $if_name
    test_ping_ipv4 $GOOGLE_PUBLIC_DNS_V4 $if_name 1500
  fi
  if [ $check_ipv6 = 0 ]; then
    ipv6_addr=$(get_ipv6_addr ${if_name})
    ipv6_gw_addr=$(get_ipv6_gw_addr ${if_name})
    test_ping_ipv6 $ipv6_gw_addr $if_name
    test_ping_ipv6 $ipv6_gw_addr $if_name 1280
    test_ping_ipv6 $GOOGLE_PUBLIC_DNS_V6 $if_name
    test_ping_ipv6 $GOOGLE_PUBLIC_DNS_V6 $if_name 1280
  fi
  echo

  echo_bold 'STEP 3. DNS and HTTP'
  test_dig $WIDE_DOMAIN A
  test_dig $WIDE_DOMAIN AAAA
  if [ $check_ipv4 = 0 ]; then
    test_http $GOOGLE_IPV4
  fi
  if [ $check_ipv6 = 0 ]; then
    test_http $GOOGLE_IPV6
  fi
  echo

  # Cleanup
  rm -rf .dropcheck
}

if [ $# != 1 ]; then
  echo "Usage: ${0} interface"
  exit 1
fi

main $1
